// Два основных понятия в react это демент и компонент

// 1 Элемент = это маленькая структура верстки которая может помещятся на странице
// Компонент = Компоненты могут повторятся на странице сколько угодно раз, они делятся  на функциональные и классовые компоненты

// Например компонент модального окна у нас может быть штук 5 модальных окон, вместо того чтобы каждый раз создавать новый элемент новую верстку новое поведенеие мы просто 1 раз создали компонент и потом его просто берем и переиспользуем в проекте

/ Есть еще два основных понятия которые есть в react это Props и state 

//1. Props = по факту это свойсто нашего компонента

вот пример = <Clock text='Hello'/> Hello это props 

 Props = Свойсто это не изменяемое сотояние  для того чтобы его изменить нужно полностью перерендерить этот компонент

//2. State = это состояние нашего компонента например в  таймере постоянно обновляется наше время  и соответственно состояние нашего компонента постоянно меняется 

//Самое главное что нужно понимать при работе с соcтояниями это то как правильно изменять этот state 
// Для этого применяется команда this.setState({
    data: new Date() //Сюда мы передаем объект с нашим новым состоянием
})

// В классовых компонентах мы можем задавать методы 
//Гавная функция/свойсто  у классовых это render( // внутри него мы прописываем то что будет выводится на страницу а имменоо верстка
    return (
        <div> 
            <h1><{this.props.text}/h1>
        </div>
    )
)


// Если это функциональные компоненты  то прописывать функции 

// Важно для понимания жизненный цикл компонента 

//1 Когда наш компонент был создан в нем запускается  setInterval   = наш таймер 
componentDidMount() {
    this.timerID = setInterval (
        ()=> this.tick(),
        1000
    )
}

// Когда наш компонент исчезает со страницы для того чтобы у нас небыло утечек в памяти  мы этот интервал тоесть таймер полностью останавливаем |
              v 
componentWillUnmount() {
    clearInterval(this.timerID)
}

// У каждого компонента есть 4 стадии жизненного цикла у каждого компонента 
1. Это когда он появлятся 
2. Это когда он обновляется 
3. Это когда он исчезает со страницы
4. Это когда он выдает какую то ошибку

// И все эти состояния мы с вами можем обрабатывать при помощи некоторых  хуков
1 Они называются componentDidMount componentWillUnmount и прочее

// Также мы должны четко понимать что когда мы делаем запросы к серверу они должны выполнятся только после того как наш компонент отрендерился  тоесть в хуке componentDidMount только здесь мы можем  делать запросы
1 Одна из основных ошибок новичков то что они делают щзапросы прямо внутри конструктора то есть еще до того как наш компонент отрендерился == но это не правильное поведенение потому что чаще всего запросы которые мы делаем на сервер они влияют на верстку которая будет отрендерина внутри компонента 
2 Если мы это делаем еще до того как компонент появился на странице то это ведет к багам 


// Обработчики событий еще одна важная тема 
//Нужно правильно привязывать котекст вызова this клссовых компонентах  

//Мы не должны забывать что каждую функцию если она использутся внутри нашей верстки   или каких то других вариантах  мы должны биндинть к нашему экземпляру класса 
1 Классичесий способ это  с помощью метода bind() 

//Неправильный вариант
this.handleChange

//Правильный вариант
например: this.handleChange =thishandleChange.bind(this)  // тут мы берем опять через контекст this и жестку привязывем при помощи bind к экземпляру класса

// Кроме этого мы можем использовать стрелочные функции 
1 Когда мы передаем какую то функцию  в обработчик события мы можем написать просто написать например: onChange{() => this.handleChange} 

//Стрелочная функция не имеет своего контекста и таким образом функция будет при вызове ссылаться на экземпляр нашего класса вернее даже на его constructor

// Любые классы которые мы создаем внутри react должны начинатся с большой буквы

// Лайфхак с паттерном 

import Editor from "./components/editor/editor" //чтобы не писать два раза editor то  в папке рядом  с этим  компонетом editor создаем index.js/jsx   
И дело в том когда webpack собирает наши файлы если мы ему не указываем какой конкретный файл из папки брать  то он всегда будет подхватывать index.js

внутри index.js мы прописываем 
import Editor from "./editor"

export default Editor

свойсто static в js если мы его используем к методу  то мы этот метод можем использовать без создания нового экземпляра 